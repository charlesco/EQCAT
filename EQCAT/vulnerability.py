from __future__ import division

from math import sqrt, log

import numpy as np
import pandas as pd
from scipy import stats

import matplotlib.pyplot as plt
from aggregation import outputs

vulnerability_path = "../03-Vulnerability/"

Fragility = pd.read_csv(vulnerability_path + 'HAZUS Fragility.csv')
Fragility['mu'] = Fragility.apply(lambda row: float(row['Mean']) ** 2.0 / sqrt(float(row['SD']) ** 2 +
                                                                               float(row['Mean']) ** 2.0), axis=1)
Fragility['sigma'] = Fragility.apply(lambda row: sqrt(log((float(row['SD']) ** 2 / float(row['Mean']) ** 2.0) + 1.0)),
                                     axis=1)
Collapse = pd.read_csv(vulnerability_path + 'HAZUS Collapse.csv', index_col=0)
Fatality = pd.read_csv(vulnerability_path + 'HAZUS Fatality.csv', index_col=0)

bldg_types = np.unique(Fragility['Type'])
bldg_codes = np.unique(Fragility['Code'])
states = np.unique(Fragility['State'])
Fragility.set_index(['State', 'Code', 'Type'], inplace=True)

threshold = pd.DataFrame(columns=['State', 'Code', 'Type', 'PGA', 'Proba'])
for t in bldg_types:
    for s in states:
        for c in bldg_codes:
            mu = Fragility.loc[(s, c, t), 'mu']
            sigma = Fragility.loc[(s, c, t), 'sigma']
            pga = pd.Series(np.linspace(0, 5, 51))
            proba = pga.apply(lambda p: stats.lognorm.cdf(p, sigma, scale=mu))
            df = pd.DataFrame(dict(PGA=pga, Proba=proba))
            df['State'] = s
            df['Code'] = c
            df['Type'] = t
            threshold = threshold.append(df)

threshold['PGA'] = (threshold['PGA'] * 10)
threshold['PGA'] = threshold['PGA'].astype(int)
threshold.set_index(['State', 'Code'], inplace=True)
threshold.sort_index(inplace=True)


def damage_rates(buildings):
    buildings['PGA_temp'] = buildings['PGA (g)'] * 10.0
    buildings['PGA_temp'] = buildings['PGA_temp'].astype(int)
    for st in states:
        for cd in bldg_codes:
            thresh = threshold.loc[(st, cd)].reset_index(drop=True).set_index(['Type', 'PGA'])
            buildings = buildings.merge(thresh, how='left', left_on=['bldg_type', 'PGA_temp'], right_index=True)
            buildings.rename(columns={'Proba': st + '_prob_' + cd}, inplace=True)
    del buildings['PGA_temp']
    for cd in bldg_codes:
        buildings['Collapse_prob_' + cd] = np.nan
        for tp in bldg_types:
            rate = Collapse.get_value(tp, 'Rate')
            buildings.loc[buildings['bldg_type'] == tp, 'Collapse_prob_' + cd] =\
                buildings.loc[buildings['bldg_type'] == tp, 'Complete_prob_' + cd] * rate
    return buildings


def fatality_rates(buildings):
    for cd in bldg_codes:
        buildings['Fatality_rate_' + cd] = np.nan
        for tp in bldg_types:
            buildings.loc[buildings['bldg_type'] == tp, 'Fatality_rate_' + cd] =\
                buildings.loc[buildings['bldg_type'] == tp, 'Collapse_prob_' + cd] *\
                Fatality.get_value(tp, 'Collapse') +\
                (buildings.loc[buildings['bldg_type'] == tp, 'Complete_prob_' + cd] -
                 buildings['Collapse_prob_' + cd]) * Fatality.get_value(tp, 'Complete') +\
                (buildings.loc[buildings['bldg_type'] == tp, 'Extensive_prob_' + cd] -
                 buildings['Complete_prob_' + cd]) * Fatality.get_value(tp, 'Extensive')
    return buildings


def damage_counts(buildings):
    for cd in bldg_codes:
        for st in states:
            buildings[st + '_count_' + cd] = buildings[st + '_prob_' + cd] * buildings['bldg_count']
            buildings[st + '_count_' + cd] = buildings[st + '_count_' + cd].fillna(0.0)
        buildings['Collapse_count_' + cd] = buildings['Collapse_prob_' + cd] * buildings['bldg_count']
        buildings['Collapse_count_' + cd] = buildings['Collapse_count_' + cd].fillna(0.0)
    return buildings


def fatality_counts(buildings):
    for tm in ['day', 'night', 'transit']:
        for cd in bldg_codes:
            buildings['Fatalities_' + tm + '_' + cd] = buildings['Fatality_rate_' + cd] * buildings[tm + '_pop']
    return buildings


def consequences(code, buildings, historical=False):
    buildings = damage_rates(buildings)
    print('Damage State Probs : OK')
    buildings = fatality_rates(buildings)
    print('Fatality Rates : OK')
    buildings = damage_counts(buildings)
    buildings = fatality_counts(buildings)
    print('Counts : OK')
    if historical:
        dir_name = '../Results/Historical/' + code
    else:
        dir_name = '../Results/Instrumental/' + code
    out = outputs(buildings, dir_name, historical)
    return out


def plot_fragility(code, bldg_type):
    pga_vect = np.linspace(0, 4, 100)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_xlabel('PGA (g)')
    ax.set_ylabel('Probability of exceedance')
    for state, col in {'Slight': 'b', 'Moderate': 'g', 'Extensive': 'y', 'Complete': 'r'}.viewitems():
        row = Fragility.ix[(state, code, bldg_type)]
        prob = [stats.lognorm.cdf(motion, row['sigma'], scale=row['mu']) for motion in pga_vect]
        ax.plot(pga_vect, prob, col + '-', label=state)
    plt.legend(loc=4)
    plt.show()


def plot_fragility2(state, bldg_type):
    pga_vect = np.linspace(0, 4, 100)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_xlabel('PGA (g)')
    ax.set_ylabel('Probability of exceedance')
    for code, col in {'High': 'b', 'Moderate': 'g', 'Low': 'y', 'Precode': 'r'}.viewitems():
        row = Fragility.ix[(state, code, bldg_type)]
        prob = [stats.lognorm.cdf(motion, row['sigma'], scale=row['mu']) for motion in pga_vect]
        ax.plot(pga_vect, prob, col + '-', label=code)
    plt.legend(loc=4)
    plt.show()


def plot_fragility3(state, code):
    pga_vect = np.linspace(0, 4, 100)
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_xlabel('PGA (g)')
    ax.set_ylabel('Probabilite de depassement')
    for bldg_type, col in {'C1': 'b', 'C2': 'g', 'C2L': 'r', 'C4': 'c', 'RM2': 'm', 'S1': 'y', 'S2': 'k', 'S4': 'C0',
                           'W1': 'C1', 'W2': 'C2'}.viewitems():
        row = Fragility.ix[(state, code, bldg_type)]
        prob = [stats.lognorm.cdf(motion, row['sigma'], scale=row['mu']) for motion in pga_vect]
        ax.plot(pga_vect, prob, col + '-', label=bldg_type)
    plt.legend(loc=4)
    plt.show()

# plot_fragility('Low', 'W1')
# plot_fragility2('Complete', 'W1')
# plot_fragility3('Complete', 'High')
